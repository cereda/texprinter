/**
 * \cond LICENSE
 * ********************************************************************
 * This is a conditional block for preventing the DoxyGen documentation
 * tool to include this license header within the description of each
 * source code file. If you want to include this block, please define
 * the LICENSE parameter into the provided DoxyFile.
 * ********************************************************************
 *
 * TeXPrinter - A TeX.SX question printer
 * Copyright (c) 2012, Paulo Roberto Massa Cereda
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. Neither the name of the project's author nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ********************************************************************
 * End of the LICENSE conditional block
 * ********************************************************************
 * \endcond
 *
 * TeXGenerator.java: This class is responsible for generating a TeX file
 * from a Question object.
 * Last revision: paulo at temperantia 26 Feb 2012 14:15
 */

// package definition
package net.sf.texprinter.generators;

// needed imports
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.texprinter.config.Configuration;
import net.sf.texprinter.model.Comment;
import net.sf.texprinter.model.Post;
import net.sf.texprinter.model.Question;
import net.sf.texprinter.utils.Dialogs;
import net.sf.texprinter.utils.ProgressMessage;
import net.sf.texprinter.utils.StringUtils;

/**
 * Provides the TeX generation from a Question object.
 * 
 * @author Paulo Roberto Massa Cereda
 * @version 2.1
 * @since 1.0
 */
public class TeXGenerator {
    
    // the application logger
    private static final Logger log = Logger.getLogger(TeXGenerator.class.getCanonicalName());

    /**
     * Generates a TeX file from a Question object.
     * 
     * @param question The question.
     * @param filename The filename.
     */
    public static void generate(Question question, String filename) {

        // wait window
        ProgressMessage pm = new ProgressMessage("TeXPrinter is printing your TeX file.");
        
        // start wait window
        //pm.start();
        
        // log message
        log.log(Level.INFO, "Starting TeX generation of {0}.", filename);

        // define the file writer
        FileWriter document = null;
        
        // lets try again
        try {

            // create a new file writer
            document = new FileWriter(new File(filename));

            // create a new configuration retriever
            Configuration config = new Configuration();
            
            // log message
            log.log(Level.INFO, "Creating LaTeX headers.");
            
            // create the header
            document.write("%================================================\n");
            document.write("% Source TeX generated by TeXPrinter (" + config.getAppVersionNumber() + ")\n");
            document.write("%================================================\n");
            document.write("% Disclaimer: Though I try to guess most of\n");
            document.write("% the syntax and the code blocks and set them\n");
            document.write("% properly, sometimes the generated code might\n");
            document.write("% not compile successfully out of the box. In\n");
            document.write("% this case, please fix the errors and recompile\n");
            document.write("% your document.\n");
            document.write("%================================================\n\n");

            // the document class
            document.write("\\documentclass{article}\n\n");

            // the packages
            document.write("\\usepackage[T1]{fontenc}\n\n");
            document.write("\\usepackage{color}\n");
            document.write("\\usepackage{hyperref}\n\n");

            // definitions
            document.write("\\definecolor{bluekeywords}{rgb}{0.13,0.13,1}\n");
            document.write("\\definecolor{greencomments}{rgb}{0,0.5,0}\n");
            document.write("\\definecolor{redstrings}{rgb}{0.9,0,0}\n");

            // more packages
            document.write("\\usepackage{listings}\n");
            document.write("\\usepackage{graphics,graphicx}\n\n");

            // listings definition
            document.write("\\lstset{language=[LaTeX]TeX,\n");
            document.write("showspaces=false,\n");
            document.write("showtabs=false,\n");
            document.write("breaklines=true,\n");
            document.write("showstringspaces=false,\n");
            document.write("breakatwhitespace=true,\n");
            document.write("escapeinside={(*@}{@*)},\n");
            document.write("commentstyle=\\color{greencomments},\n");
            document.write("keywordstyle=\\color{bluekeywords},\n");
            document.write("stringstyle=\\color{redstrings},\n");
            document.write("basicstyle=\\ttfamily\\scriptsize,\n");
            document.write("frame=single,\n");
            document.write("rulecolor=\\color{blue}%\n");
            document.write("}\n\n");
            document.write("\\lstnewenvironment{TeXPrinterListing}{\\lstset{language=[LaTeX]TeX,\n");
            document.write("showspaces=false,\n");
            document.write("showtabs=false,\n");
            document.write("breaklines=true,\n");
            document.write("showstringspaces=false,\n");
            document.write("breakatwhitespace=true,\n");
            document.write("escapeinside={(*@}{@*)},\n");
            document.write("commentstyle=\\color{greencomments},\n");
            document.write("keywordstyle=\\color{bluekeywords},\n");
            document.write("stringstyle=\\color{redstrings},\n");
            document.write("basicstyle=\\ttfamily\\scriptsize,\n");
            document.write("frame=single,\n");
            document.write("rulecolor=\\color{blue}%\n");
            document.write("}}{}\n\n");

            // begin document
            document.write("\\begin{document}\n\n");

            // log message
            log.log(Level.INFO, "Adding the question title.");
            
            // create the question title
            document.write("\\title{" + question.getQuestion().getTitle() + "}\n\n");

            // log message
            log.log(Level.INFO, "Adding both asker and reputation.");
            
            // define author
            document.write("\\author{Asked by " + question.getQuestion().getUser().getName() + " (" + question.getQuestion().getUser().getReputation() + ")}\n\n");

            // log message
            log.log(Level.INFO, "Adding the question date.");
            
            // define date
            document.write("\\date{" + question.getQuestion().getDate() + " (" + question.getQuestion().getVotes() + (question.getQuestion().getVotes() == 1 ? " vote" : " votes") + ")}\n\n");

            // make title
            document.write("\\maketitle\n\n");

            // log message
            log.log(Level.INFO, "Adding the question text.");
            
            // create the question section
            document.write("\\section*{The question}\n\n");

            // get the question text
            document.write(StringUtils.escapeHTMLtoTeX(question.getQuestion().getText()) + "\n\n");

            // if the question has comments
            if (!question.getQuestion().getComments().isEmpty()) {

                // log message
                log.log(Level.INFO, "Adding the question comments.");
                
                // write the subsection
                document.write("\\subsection*{This question has " + question.getQuestion().getComments().size() + ((question.getQuestion().getComments().size() == 1) ? " comment:" : " comments:") + "}\n\n");

                // create an enumeration
                document.write("\\begin{enumerate}\n");

                // get comments
                List<Comment> questionComments = question.getQuestion().getComments();

                // for each comment
                for (Comment questionComment : questionComments) {

                    // add it as a list item
                    document.write("\\item " + StringUtils.escapeHTMLtoTeX(questionComment.getText()) + " -- \\emph{" + questionComment.getAuthor() + " on " + questionComment.getDate() + " (" + questionComment.getVotes() + (questionComment.getVotes() == 1 ? " vote" : " votes") + ")." +  "}\n");
                }

                // close the environment
                document.write("\\end{enumerate}\n\n");

            }

            // get answers
            List<Post> answersList = question.getAnswers();

            // if there are no answers
            if (answersList.isEmpty()) {

                // log message
                log.log(Level.INFO, "This question has no answers.");
                
                // print message
                document.write("\\section*{Sorry, this question has no answers yet.}\n\n");

            } else {

                // set the answer counter
                int answerCount = 1;
                
                // log message
            log.log(Level.INFO, "Adding answers.");
                
                // for each answer
                for (Post answer : answersList) {
                    
                    // log message
                    log.log(Level.INFO, "Adding answer {0}.", answerCount);
                    
                    // set the message as empty
                    String answerAccepted = "";

                    // if the answer is accepted
                    if (answer.isAccepted()) {

                        // set the message
                        answerAccepted = " -- Marked as accepted";
                    }

                    // write the title
                    document.write("\\section*{Answer " + answerCount + "}\n\n");

                    // increase the counter
                    answerCount++;

                    // add the author info
                    document.write("\\emph{Answered by " + answer.getUser().getName() + " (" + answer.getUser().getReputation() + ") on " + answer.getDate() + answerAccepted + " (" + answer.getVotes() + (answer.getVotes() == 1 ? " vote" : " votes") + ")." + "}\n\n\\vspace{0.3cm}\n\n");

                    // write the answer
                    document.write(StringUtils.escapeHTMLtoTeX(answer.getText()) + "\n\n");

                    // if the answer has comments
                    if (!answer.getComments().isEmpty()) {
                        
                        // log message
                        log.log(Level.INFO, "Adding comments for answer {0}.", (answerCount - 1));

                        // write the subsection info
                        document.write("\\subsection*{This answer has " + answer.getComments().size() + ((answer.getComments().size() == 1) ? " comment:" : " comments:") + "}\n\n");

                        // create an enumeration environment
                        document.write("\\begin{enumerate}\n");

                        // get the answer comments
                        List<Comment> answerComments = answer.getComments();

                        // for each comment
                        for (Comment answerComment : answerComments) {

                            // write it as an item
                            document.write("\\item " + StringUtils.escapeHTMLtoTeX(answerComment.getText()) + " -- \\emph{" + answerComment.getAuthor() + " on " + answerComment.getDate() + " (" + answerComment.getVotes() + (answerComment.getVotes() == 1 ? " vote" : " votes") + ")." +  "}\n");
                        }
                        // close the environment
                        document.write("\\end{enumerate}\n\n");

                    }
                }
            }
            
            // log message
            log.log(Level.INFO, "TeX generation complete, closing {0}.", filename);
            
            // end document
            document.write("\\end{document}\n");

            // close document
            document.close();
            
            // stop the wait window
            pm.interrupt();

        } catch (IOException ioexception) {
            
            // log message
            log.log(Level.SEVERE, "An IO exception was raised while trying to save the TeX file. MESSAGE: {0}", StringUtils.printStackTrace(ioexception));
            
            // stop the wait window
            pm.interrupt();
            
            // critical error, exit
            Dialogs.showExceptionWindow();
            
        } catch (Exception exception) {
            
            // log message
            log.log(Level.SEVERE, "A generic error occured while trying to save the TeX file. MESSAGE: {0}", StringUtils.printStackTrace(exception));
            
            // log message
            log.log(Level.INFO, "I will try to remove the remaining TeX file.");
            
            try {
                
                // log message
                log.log(Level.INFO, "Closing document.");

                // close the document
                document.close();             
                
            } catch (Exception ex) {
                
                // log message
                log.log(Level.WARNING, "I could not close the document. MESSAGE: {0}", StringUtils.printStackTrace(ex));
            }

            try {
                
                // reference problematic file
                File target = new File(filename);

                // log message
                log.log(Level.INFO, "Opening problematic file {0}.", filename);
                
                // check if file exists
                if (target.exists()) {
                    
                    // log message
                    log.log(Level.INFO, "File exists, trying to delete it.");
                    
                    // trying to remove it
                    if (target.delete()) {
                        
                        // log message
                        log.log(Level.INFO, "File {0} was successfully removed.", filename);
                        
                    } else {
                        
                        // log message
                        log.log(Level.SEVERE, "File {0} could not be removed.", filename);
                        
                    }
                }
            } catch (SecurityException se) {
                
                // log message
                log.log(Level.SEVERE, "A security exception was raised. MESSAGE: {0}", StringUtils.printStackTrace(se));
                
            }

            // stop the wait window
            pm.interrupt();
            
            // critical error, exit
            Dialogs.showExceptionWindow();

        }
    }
}
